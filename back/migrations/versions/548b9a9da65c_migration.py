"""migration

Revision ID: 548b9a9da65c
Revises: 50b0def08514
Create Date: 2024-06-10 22:01:01.022479

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "548b9a9da65c"
down_revision: Union[str, None] = "50b0def08514"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column("user", sa.Column("is_active", sa.Boolean(), nullable=False))
    op.add_column(
        "user", sa.Column("is_verified", sa.Boolean(), nullable=False)
    )
    op.drop_constraint("user_email_key", "user", type_="unique")
    op.create_index(op.f("ix_user_email"), "user", ["email"], unique=True)
    op.drop_column("user", "last_name")
    op.drop_column("user", "is_activated")
    op.drop_column("user", "created_at")
    op.drop_column("user", "first_name")
    op.drop_column("user", "updated_at")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "user",
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.add_column(
        "user",
        sa.Column(
            "first_name", sa.VARCHAR(), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "user",
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.add_column(
        "user",
        sa.Column(
            "is_activated", sa.BOOLEAN(), autoincrement=False, nullable=False
        ),
    )
    op.add_column(
        "user",
        sa.Column(
            "last_name", sa.VARCHAR(), autoincrement=False, nullable=True
        ),
    )
    op.drop_index(op.f("ix_user_email"), table_name="user")
    op.create_unique_constraint("user_email_key", "user", ["email"])
    op.drop_column("user", "is_verified")
    op.drop_column("user", "is_active")
    # ### end Alembic commands ###
